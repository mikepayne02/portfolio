---
import 'maplibre-gl/dist/maplibre-gl.css'

import { MAPTILER_API_KEY } from 'astro:env/client'

const {
  latitude,
  longitude,
  zoom,
  pitch,
  deck,
  interactive = false,
  ...props
} = Astro.props
---

<maplibre-map
  id='map'
  data-latitude={latitude}
  data-longitude={longitude}
  data-zoom={zoom}
  data-pitch={pitch}
  data-interactive={interactive}
  data-deck={deck}
  data-maptiler_key={MAPTILER_API_KEY}
  {...props}
>
</maplibre-map>

<script>
  class MapLibreMap extends HTMLElement {
    private observer: IntersectionObserver

    constructor() {
      super()

      this.observer = new IntersectionObserver(
        (entries) =>
          entries.forEach((entry) => {
            if (entry.isIntersecting)
              this.load().then(() => this.observer.disconnect())
          }),
        {
          rootMargin: '240px'
        }
      )
    }

    connectedCallback() {
      this.observer.observe(this)
    }

    disconnectedCallback() {
      this.observer.disconnect()
    }

    getStyle(theme: string) {
      return (
        (theme == 'dark'
          ? 'https://api.maptiler.com/maps/dataviz-dark/style.json?key='
          : 'https://api.maptiler.com/maps/dataviz-light/style.json?key=') +
        this.dataset.maptiler_key
      )
    }

    async load() {
      const { Map } = await import('maplibre-gl')
      const { ArcLayer } = await import('@deck.gl/layers')
      const { MapboxOverlay } = await import('@deck.gl/mapbox')

      const storedTheme =
        typeof localStorage !== 'undefined' && localStorage.getItem('theme')

      const lightModePref = window.matchMedia('(prefers-color-scheme: light)')

      const initTheme =
        storedTheme || (lightModePref.matches ? 'light' : 'dark')

      const map = new Map({
        container: 'map',
        interactive: this.dataset.interactive == 'true',
        center: [
          parseFloat(this.dataset.longitude ?? '0'),
          parseFloat(this.dataset.latitude ?? '0')
        ],
        zoom: parseFloat(this.dataset.zoom ?? '0'),
        pitch: parseFloat(this.dataset.pitch ?? '0'),
        style: this.getStyle(initTheme)
      })

      // https://maplibre.org/maplibre-gl-js/docs/examples/animate-camera-around-point/
      const rotateCamera = (timestamp: number) => {
        // clamp the rotation between 0 -360 degrees
        // Divide timestamp by 100 to slow rotation to ~10 degrees / sec
        map.rotateTo((timestamp / 120) % 360, { animate: false })
        // Request the next frame of the animation.
        requestAnimationFrame(rotateCamera)
      }

      lightModePref.addEventListener('change', (e) =>
        map.setStyle(this.getStyle(e.matches ? 'light' : 'dark'))
      )

      document.addEventListener('theme-change', (e) => {
        map.setStyle(this.getStyle((e as CustomEvent).detail.theme))
      })

      map.on('load', () => {
        if (!this.dataset.deck) return

        const layer = new ArcLayer({
          id: 'arc-layer',
          data: this.dataset.deck,
          getSourceColor: [96, 165, 250],
          getTargetColor: [48, 98, 179],
          getWidth: 12,
          beforeId: 'Place labels'
        })

        const overlay = new MapboxOverlay({
          interleaved: true,
          layers: [layer]
        })

        map.addControl(overlay)

        // Start the animation.
        rotateCamera(0)
      })
    }
  }

  window.customElements.define('maplibre-map', MapLibreMap)
</script>

<style is:global>
  .maplibregl-ctrl-attrib {
    display: none;
  }
</style>
