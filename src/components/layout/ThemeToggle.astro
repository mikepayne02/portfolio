---
import MdiMoonAndStars from '~icons/mdi/moon-and-stars'
import MdiWeatherSunny from '~icons/mdi/weather-sunny'

const { className } = Astro.props
---

<theme-toggle>
  <button
    class:list={[
      className,
      'relative size-8 rounded-md border border-border bg-primary-foreground shadow-sm transition-colors hover:bg-border/25 hover:text-foreground/75 hover:shadow'
    ]}
  >
    <span class='sr-only'>Dark Theme</span>
    <MdiWeatherSunny
      name='heroicons:moon'
      class='absolute start-1/2 top-1/2 size-6 -translate-x-1/2 -translate-y-1/2 rotate-0 scale-100 opacity-100 transition-opacity transition-transform dark:rotate-180 dark:scale-0 dark:opacity-0'
    />
    <MdiMoonAndStars
      class='absolute start-1/2 top-1/2 size-6 -translate-x-1/2 -translate-y-1/2 rotate-180 scale-0 opacity-0 transition-opacity transition-transform dark:rotate-0 dark:scale-100 dark:opacity-100'
    />
  </button>
</theme-toggle>

<script>
  // Note that if you fire the theme-change event outside of this component, it will not be reflected in the button's aria-checked attribute

  function rootInDarkMode() {
    return document.documentElement.classList.contains('dark')
  }

  class ThemeToggle extends HTMLElement {
    #controller: AbortController | undefined

    connectedCallback() {
      const button = this.querySelector<HTMLButtonElement>(
        'button'
      ) as HTMLButtonElement
      // set aria role value
      button.setAttribute('role', 'switch')
      button.setAttribute('aria-checked', String(rootInDarkMode()))
      // Abort signal
      const { signal } = (this.#controller = new AbortController())

      // button event
      button.addEventListener(
        'click',
        () => {
          // invert theme
          const themeChangeEvent = new CustomEvent('theme-change', {
            detail: {
              theme: rootInDarkMode() ? 'light' : 'dark'
            }
          })
          // dispatch event -> ThemeProvider.astro
          document.dispatchEvent(themeChangeEvent)

          // set the aria-checked attribute
          button.setAttribute('aria-checked', String(rootInDarkMode()))
        },
        { signal }
      )
    }

    disconnectedCallback() {
      this.#controller?.abort()
    }
  }

  customElements.define('theme-toggle', ThemeToggle)
</script>
