---
import LineMdSunnyOutline from '~icons/line-md/sunny-outline'
import LineMdMoon from '~icons/line-md/moon'
---

<theme-toggle transition:persist='theme'>
  <button
    class='bg-primary-foreground border-input hover:bg-border/25 hover:text-foreground/75 relative size-8 cursor-pointer rounded-md border shadow-xs transition-colors hover:shadow-sm'
  >
    <span class='sr-only'>Dark Theme</span>
    <div
      class='absolute start-1/2 top-1/2 size-6 -translate-x-1/2 -translate-y-1/2 scale-100 rotate-0 opacity-100 transition-opacity transition-transform dark:scale-0 dark:rotate-180 dark:opacity-0'
      id=''
    >
      <LineMdSunnyOutline
        style={{ width: '100%', height: '100%', objectFit: 'cover' }}
      />
    </div>
    <div
      class='absolute start-1/2 top-1/2 size-6 -translate-x-1/2 -translate-y-1/2 scale-0 rotate-180 opacity-0 transition-opacity transition-transform dark:scale-100 dark:rotate-0 dark:opacity-100'
    >
      <LineMdMoon
        style={{ width: '100%', height: '100%', objectFit: 'cover' }}
      />
    </div>
  </button>
</theme-toggle>

<script>
  // Note that if you fire the theme-change event outside of this component, it will not be reflected in the button's aria-checked attribute

  function rootInDarkMode() {
    return document.documentElement.classList.contains('dark')
  }

  class ThemeToggle extends HTMLElement {
    #controller: AbortController | undefined

    connectedCallback() {
      const button = this.querySelector<HTMLButtonElement>(
        'button'
      ) as HTMLButtonElement
      // set aria role value
      button.setAttribute('role', 'switch')
      button.setAttribute('aria-checked', String(rootInDarkMode()))
      // Abort signal
      const { signal } = (this.#controller = new AbortController())

      // button event
      button.addEventListener(
        'click',
        () => {
          // dispatch event -> ThemeProvider.astro
          document.dispatchEvent(
            new CustomEvent('theme-change', {
              detail: {
                theme: rootInDarkMode() ? 'light' : 'dark'
              }
            })
          )

          // set the aria-checked attribute
          button.setAttribute('aria-checked', String(rootInDarkMode()))
        },
        { signal }
      )
    }

    disconnectedCallback() {
      this.#controller?.abort()
    }
  }

  customElements.define('theme-toggle', ThemeToggle)
</script>
